#!/usr/bin/env python3

import getopt
import sys
import re
import flux
import xml.etree.ElementTree as ET


fluxml_ns = ''
poolmap = {}
numlevels = 0
numreactions = 0

def scan_pools(fluxml):
	global fluxml_ns, poolmap, numlevels
	poollist = fluxml.getiterator('{%s}pool' % fluxml_ns)
	for pool in poollist:
		# atoms hat default-Wert 1:
		atoms = int(pool.attrib.get('atoms','1'))
		poolmap[pool.attrib.get('id')] = atoms
		if atoms > numlevels:
			numlevels = atoms

def scan_reactions(fluxml):
	global fluxml_ns, numreactions
	reactionlist = fluxml.getiterator('{%s}reaction' % fluxml_ns)
	for reaction in reactionlist:
		numreactions = numreactions + 1

def put_help():
	print('''FMLSTAT -- FluxML statistics (c) Michael Weitzel 2009-2010
SYNTAX: fmlstat [-i <file> ]
  -i <file>	FluxML input file (stdin if omitted)''')


def main():
	global fluxml_ns

	try:
		opts, args = getopt.getopt(sys.argv[1:],"i:h",['infml','help'])
	except getopt.GetoptError:
		print("Error with command line parameters")
		put_help()
		sys.exit(1)

	opt_infmlfile = None

	for o, a in opts:
		if o in ('-i', '--infml'):
			opt_infmlfile = a
		elif o in ('-h','--help'):
			put_help();
			sys.exit(0)
		else:
			print(o)
			print(a)
	
	infile = sys.stdin
	if opt_infmlfile != None:
		infile = open(opt_infmlfile, 'r')
	else:
		print('Reading from standard input ...', file=sys.stderr)
	
	fluxml_tree = ET.parse(infile)
	fluxml = fluxml_tree.getroot()
	if infile != sys.stdout: infile.close();

	assert fluxml.tag.endswith('fluxml')
	if fluxml.tag.startswith('{'):
		fluxml_ns = fluxml.tag[1:fluxml.tag.rindex('}')]
	assert fluxml.tag == '{%s}fluxml' % fluxml_ns
	
	scan_pools(fluxml)
	scan_reactions(fluxml)

	levels = []
	levels.append(len(poolmap))

	for L in range(1,numlevels+1):
		dim = 0
		for pool in poolmap:
			dim = dim + flux.bin_coeff(poolmap[pool],L)
		levels.append(dim)

	isos = 0
	cumos = 0
	for pool in poolmap:
		isos = isos + (1 << poolmap[pool])
		cumos = cumos + (1 << poolmap[pool]) - 1

	print('total: %i cumos (%i isos)' % (cumos,isos,))
	print('       %i atoms, %i pools, %i reactions' % (levels[1],levels[0],
		numreactions))
	print('cascade:')
	for L in range(1,numlevels+1):
		print('%2i, %i' % (L,levels[L]))

if __name__ == "__main__":
	main()

